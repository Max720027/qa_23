{
	"info": {
		"_postman_id": "25c63dc9-d82a-42d0-a117-e8a153d80b3f",
		"name": "postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"var resp_age = jsonData.age;\r",
							"var resp_name = jsonData.name;\r",
							"var resp_salary = jsonData.salary;\r",
							"pm.test(\"Your test name\", function () {\r",
							"        pm.expect(resp_name).to.eql(\"max\");\r",
							"});\r",
							"pm.test(\"You test age\", function () {\r",
							"       pm.expect(resp_age).to.eql(\"34\");\r",
							"});\r",
							"pm.test(\"Your test salary\", function () {\r",
							"        pm.expect(resp_salary).to.eql(100);\r",
							"});\r",
							"\r",
							"\r",
							"var requestData= pm.request.body.formdata.toObject();  //спарсить реквэст\r",
							"var req_name= requestData.name;                       // перемен реквест нэйм\r",
							"var req_age= requestData.age;\r",
							"var req_salary= requestData.salary;\r",
							"var resp_family = jsonData.family;\r",
							"pm.test(\"name request-response\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"pm.test(\"age request-response\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"pm.test(\"salary request-response\", function () {\r",
							"    pm.expect(resp_salary).to.eql(+req_salary);\r",
							"});\r",
							"console.log (resp_family);\r",
							"\r",
							"pm.test(\"u_salary_1_5_year =salary*4\", function () {\r",
							"    pm.expect(resp_family[\"u_salary_1_5_year\"]).to.eql(req_salary*4);          \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "max",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"request": {
				"method": "GET",
				"header": [],
				"url": null
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json ();\r",
							"var requestData = pm.request.url.query.toObject();\r",
							"var resp_name = jsonData.name;\r",
							"var req_name = requestData.name;\r",
							"pm.test(\"resp_name-req_name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"var resp_age = jsonData.age;\r",
							"var req_age = requestData.age;\r",
							"pm.test(\"resp_age-req_age\", function () {\r",
							"    pm.expect(resp_age).to.eql(+req_age);   //в ответе 34 без \"\" поэтому +\r",
							"});\r",
							"console.log (req_age);\r",
							"\r",
							"console.log (resp_age);\r",
							"var req_salary = requestData.salary;\r",
							"var resp_salary = jsonData.salary;\r",
							"\r",
							"console.log (resp_salary[0]); //Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log (resp_salary[1]);\r",
							"console.log (resp_salary[2]);\r",
							" pm.test(\"что 0-й элемент параметра salary равен salary из request \", function () {\r",
							"    pm.expect(resp_salary[0]).to.eql(+req_salary);   \r",
							"});\r",
							"pm.test(\"что 1-й элемент параметра salary равен salary из request \", function () {\r",
							"    pm.expect(+resp_salary[1]).to.eql(req_salary*2);   \r",
							"});\r",
							"pm.test(\"что 2-й элемент параметра salary равен salary из request \", function () {\r",
							"    pm.expect(+resp_salary[2]).to.eql(req_salary*3);   \r",
							"});\r",
							"\r",
							"pm.environment.set(\"name\",req_name);\r",
							"pm.environment.set(\"age\",req_age);\r",
							"pm.environment.set(\"salary\",req_salary);\r",
							"\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary. ????????\r",
							"\r",
							"for (let i = 0; i < resp_salary.length; i++){\r",
							"console.log(resp_salary[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=max&age=34&salary=100",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "max"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json ();\r",
							"var requestData = pm.request.body.formdata. toObject(); \r",
							"\r",
							"pm.test (\"json response имеет параметр start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"\r",
							"});\r",
							"pm.test (\"что json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"\r",
							" });\r",
							" pm.test (\"что json response имеет параметр qa_salary_after_12_months\", function (){\r",
							"pm.expect (jsonData).to.have.property (\"qa_salary_after_12_months\");\r",
							" });\r",
							"  pm.test (\"что json response имеет параметр qa_salary_after_1.5_year\", function (){\r",
							"pm.expect (jsonData).to.have.property (\"qa_salary_after_1.5_year\");\r",
							" });\r",
							"  pm.test (\" что json response имеет параметр qa_salary_after_3.5_years\", function (){\r",
							"pm.expect (jsonData).to.have.property (\"qa_salary_after_3.5_years\");\r",
							" });\r",
							" pm.test (\" что json response имеет параметр person\", function (){\r",
							"pm.expect (jsonData).to.have.property (\"person\");\r",
							" });\r",
							" pm.test (\"что параметр start_qa_salary равен salary из request\", function (){\r",
							"pm.expect (jsonData[\"start_qa_salary\"]).to.eql (+requestData.salary);               \r",
							"          //можно взамен [ \"\" ]писать jsonData.start_qa_salary\r",
							" });\r",
							"pm.test (\"что параметр qa_salary_after_6_months равен salary*2 из request\", function (){\r",
							"pm.expect (jsonData.qa_salary_after_6_months).to.eql (+requestData.salary*2);             \r",
							"});   \r",
							"   pm.test (\"что параметр qa_salary_after_12_months равен salary*2.7 из request\", function (){\r",
							"pm.expect (jsonData.qa_salary_after_12_months).to.eql (+requestData.salary*2.7);         \r",
							"});\r",
							"pm.test (\"что параметр qa_salary_after_1.5_year равен salary*3.3 из request\", function (){\r",
							"pm.expect (jsonData[\"qa_salary_after_1.5_year\"]).to.eql (+requestData.salary*3.3); // другим методом не работает т.к. синтаксическая ошибка из-за 1.5, точка поэтому в скобки         \r",
							"});\r",
							"   pm.test (\"что параметр qa_salary_after_3.5_years равен salary*3.8 из request\", function (){\r",
							"pm.expect (jsonData[\"qa_salary_after_3.5_years\"]).to.eql (+requestData.salary*3.8);\r",
							"});\r",
							"var resp_person = jsonData.person;\r",
							"pm.test (\"что в параметре person, 1-й элемент из u_name равен salary из request \", function (){\r",
							"pm.expect (resp_person.u_name[1]).to.eql (+requestData.salary);\r",
							"});\r",
							"pm.test (\" что параметр u_age равен age из request\", function (){\r",
							"pm.expect (resp_person.u_age).to.eql (+requestData.age);\r",
							"});\r",
							"pm.test (\"что параметр u_salary_5_years равен salary*4.2 из request\", function (){\r",
							"pm.expect (resp_person.u_salary_5_years).to.eql (+requestData.salary*4.2);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}